# Johan Johannisson Lundquist 12/23-2019 (Senast ändrad 5/6-2020)

from pclass import *

def skapaBostad(f_namn):  # funktion för att ta in data från indata.txt och skapa Bostad objekt. Returnerar lista av dessa objekt

    ret = []
    i = 0
    b, k, r = grundInställningar()  # b = bankränta, k = kontantinsats, r = ränteavdrag

    with open(f_namn, "r") as file:
        file.readline()          # skippar första raden
        data = file.readlines()  # läser in resterande raderna
        file.close()

    while i < len(data):                       # skapar bostad objekten i listan ret
        ret.append(Bostad(data[i].rstrip(),    # pris
                          data[i+1].rstrip(),  # yta
                          data[i+2].rstrip(),  # hyra
                          data[i+3].rstrip(),  # tfn
                          data[i+4].rstrip(),  # adress
                          round(int(data[i+2].rstrip()) + ((int(data[i].rstrip())-k)*(b/100)*(1-(r/100)))/12, 1),
                                               # månadskostnad
                          round(int(data[i].rstrip()) / float(data[i+1].rstrip()), 1)))
                                               # ytkostnad
        i += 5                                 # ny bostad efter 5 rader i filen
    return ret

def inner(text):
    while True:
        try:
            x = float(input(text))
            if x >= 0:
                break
            else:
                print("Ange ett positivt tal.")
        except ValueError:
            print("Vänligen ange ett tal!")
    return x

def fåBankränta():
    return inner("Vänligen ange den aktuella bankräntan (%): ")

def fåKontantinsats():
    return inner("Vänligen ange din kontantinsats (kr): ")

def fåRänteavdrag():
    return inner("Vänligen ange det aktuella ränteavdraget (%): ")

def grundInställningar():  # funktion för att ta in nödvändiga inputs
    bankränta = fåBankränta()
    kontantinsats = fåKontantinsats()
    ränteavdrag = fåRänteavdrag()
    return bankränta, kontantinsats, ränteavdrag

def skapaGrundUrval(f_namn):                     # funktion för att skapa grundinställningarna för urvalet från urval.txt
    with open(f_namn, "r") as file:
        file.readline()                          # skippar första raden
        data = file.readline()
        file.close()
    uMånadskostnad, uHyra, uKvmpris, uYta = data.split(",", 4)
    U = Urval(int(uMånadskostnad), int(uHyra), int(uKvmpris), int(uYta))
    return U

def skapaUrval(bostad,urval,whitelist,blacklist):# funktion för att skapa och visa urvalet som valts
    print("\nDitt urval:")
    for hus in bostad:
        if hus.månadskostnad < urval.uMånadskostnad * 1000 and \
                hus.hyra < urval.uHyra * 1000 and \
                hus.ytkostnad < urval.uKvmpris * 1000 and \
                hus.yta > urval.uYta: # lägg till and condition för "existerar ej i blacklist" + or condition för "existerar i whitelist" ?
            input("\n-----\nTryck var som helst för nästa bostad i urvalet:")  # bostäderna från urvalet ska presenteras en i taget
            print(hus)
            whitelist.append(hus)
        else:
            blacklist.append(hus)
            continue
    return whitelist, blacklist

def grundmeny(bostad,urval):         # funktion som sköter menyn
    while True:
        try:
            GM = int(input("\nGrundmeny:\n1) Ändra urvalsparametrar\n2) Sortera urvalet av bostäder\n3) Lägg till/ta bort bostäder från urvalet\n4) Visa urvalet\n5) Avsluta\n:"))
        except ValueError:
            GM = 6
        if GM == 1:
            ändraUrval(bostad, urval)

        elif GM == 2:
            try:
                sortU(whitelist,bostad, urval)
            except NameError:
                print("Inget urval har skapats ännu")
                grundmeny(bostad, urval)


        elif GM == 3:
            try:
                meny_revideraUrval(bostad, urval,whitelist,blacklist)
            except NameError:
                print("Inget urval har skapats ännu")
                grundmeny(bostad, urval)

        elif GM == 4:
            whitelist, blacklist = skapaUrval(bostad, urval)

        elif GM == 5:
            saveU("lista_bostadsurval.txt", whitelist)
            exit()
        else:
            print("Vänligen välj något av de ovanstående alternativen.")

def ändraUrval(bostad, urval): #nr 5 ska vara tillbaka till GM & inget 6:e alt
    while True:
        print(urval)     # grundinställningarna från urval.txt
        try:
            justeraParameter = int(input(":"))
        except ValueError:
            justeraParameter = 6

        if justeraParameter == 1:
            nyuMånadskostnad = fåMånadskostnad()
            urval.justera_uMk(nyuMånadskostnad)

        elif justeraParameter == 2:
            nyuHyra = fåHyran()
            urval.justera_uH(nyuHyra)

        elif justeraParameter == 3:
            nyuKvmpris = fåKvmpris()
            urval.justera_uKvmp(nyuKvmpris)

        elif justeraParameter == 4:
            while True:
                try:
                    nyuYta = int(input("Boendeytan ska minst vara (kvm): "))
                    urval.justera_uY(nyuYta)
                    break
                except ValueError:
                    print("Vänligen ange ett heltal.")

        elif justeraParameter == 5:
            grundmeny(bostad,urval)

        else:
            print("Vänligen välj något av de ovanstående alternativen.")

def meny_revideraUrval(bostad, urval, whitelist, blacklist):
    while True:
        try:
            val = int(input("Jag vill ... \n1) Lägga till en bostad till urvalet\n2) Ta bort en bostad från urvalet\n3) Gå tillbaka till grundmenyn\n:"))

        except ValueError:
            val = 4

        if val == 1:
            if len(blacklist) == 0:
                print("Det finns inga bostäder att lägga till i ditt urval")
                meny_revideraUrval(bostad, urval, whitelist, blacklist)
            else:
                text="Vilken bostad vill du tillägga i ditt urval?"
                blacklist, whitelist = revideraUrval(blacklist,whitelist,text)

        elif val == 2:
            if len(whitelist) == 0:
                print("Ditt urval är tomt")
                meny_revideraUrval(bostad, urval, whitelist, blacklist)
            else:
                text = "Vilken bostad vill du ta bort från ditt urval?"
                whitelist, blacklist = revideraUrval(whitelist,blacklist,text)

        elif val == 3:
            return whitelist, blacklist
            #grundmeny(bostad,urval)

        else:
            print("Vänligen välj något av de ovanstående alternativen.")

def revideraUrval(list1,list2,text):
    while True:
        i = len(list1) + 1
        x = 1
        try:
            print(text)
            for hus in list1:
                print("\n"+str(x)+".")
                print(hus)
                x = x + 1
            print("\n"+str(x)+". Gå tillbaka till grundmenyn\n")
            val = int(input(":"))
        except ValueError:
            val = i + 1

        if val in range(1, i):
            list1.pop(val-1)
            list2.append(val-1)
        elif val == i:
            return list1, list2
        else:
            print("Vänligen välj något av de ovanstående alternativen.")

def felHantering(text):
    while True:
        try:
            x = int(input(text))
            if x >= 0:
                break
            else:
                print("Ange ett positivt tal.")
        except ValueError:
            print("Vänligen ange ett tal!")
    return x

def fåMånadskostnad():
    return felHantering("Månadskostnaden ska högst vara (kkr): ")

def fåHyran():
    return felHantering("Hyran ska högst vara (kkr): ")

def fåKvmpris():
    return felHantering("Kvadramterpriset ska högst vara (kkr): ")

def sortU(whitelist,bostad,urval): # sortera whitelist istället för bostad!
    x = menySortU()
    for hus in whitelist:
        if x == 1:
            whitelist=sorted(whitelist, key=lambda hus: float(hus.månadskostnad))
        elif x == 2:
            whitelist = sorted(whitelist, key=lambda hus: int(hus.hyra))
        elif x == 3:
            whitelist = sorted(whitelist, key=lambda hus: float(hus.ytkostnad))
        elif x == 4:
            whitelist = sorted(whitelist, key=lambda hus: float(hus.yta))
        elif x == 5:
            continue
            #skippa sortering
        else:
            grundmeny(bostad,urval) #gå till grundmeny
    return whitelist

def menySortU():
    while True:
        try:
            VilkenParameter = int(input("Utifrån vilken parameter skulle du vilja sortera urvalet efter?\n1) Månadskostnad\n2) Hyra\n3) Kvadratmeterpris\n"
                                        "4) Boendeyta \n5) Ingen \n6) Återvänd till Grundmenyn\n:"))
        except ValueError:
            VilkenParameter == 7
        if VilkenParameter in range(1,7):
            return VilkenParameter
        else:
            print("Vänligen ange ett av de ovanstående alternativen!")

def saveU(f_namn,whitelist): #whitelist istället för bostad antagligen
    i = 1
    with open(f_namn, "w") as file:
        for hus in whitelist:
            file.write(str(i)+"."+str(hus)+"\n\n")
            i = i+1
    file.close()

def uppstart():
    bostad = skapaBostad("indata.txt")
    for hus in bostad:  # printar bostäderna första gången
        print(hus)
    urval = skapaGrundUrval("urval.txt")
    grundmeny(bostad,urval)
    return bostad,urval

uppstart()
